// Generated by gencpp from file msg/GpsData.msg
// DO NOT EDIT!


#ifndef MSG_MESSAGE_GPSDATA_H
#define MSG_MESSAGE_GPSDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msg
{
template <class ContainerAllocator>
struct GpsData_
{
  typedef GpsData_<ContainerAllocator> Type;

  GpsData_()
    : velocity(0.0)
    , lat(0.0)
    , lon(0.0)
    , height(0.0)  {
    }
  GpsData_(const ContainerAllocator& _alloc)
    : velocity(0.0)
    , lat(0.0)
    , lon(0.0)
    , height(0.0)  {
  (void)_alloc;
    }



   typedef float _velocity_type;
  _velocity_type velocity;

   typedef float _lat_type;
  _lat_type lat;

   typedef float _lon_type;
  _lon_type lon;

   typedef float _height_type;
  _height_type height;





  typedef boost::shared_ptr< ::msg::GpsData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg::GpsData_<ContainerAllocator> const> ConstPtr;

}; // struct GpsData_

typedef ::msg::GpsData_<std::allocator<void> > GpsData;

typedef boost::shared_ptr< ::msg::GpsData > GpsDataPtr;
typedef boost::shared_ptr< ::msg::GpsData const> GpsDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg::GpsData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg::GpsData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'msg': ['/home/pi/robotfish/src/msg/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::msg::GpsData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg::GpsData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg::GpsData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg::GpsData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg::GpsData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg::GpsData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg::GpsData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ba3cc63050e4d95f5191738e220625ed";
  }

  static const char* value(const ::msg::GpsData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xba3cc63050e4d95fULL;
  static const uint64_t static_value2 = 0x5191738e220625edULL;
};

template<class ContainerAllocator>
struct DataType< ::msg::GpsData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg/GpsData";
  }

  static const char* value(const ::msg::GpsData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg::GpsData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 velocity\n"
"float32 lat\n"
"float32 lon\n"
"float32 height\n"
;
  }

  static const char* value(const ::msg::GpsData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg::GpsData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.velocity);
      stream.next(m.lat);
      stream.next(m.lon);
      stream.next(m.height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GpsData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg::GpsData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg::GpsData_<ContainerAllocator>& v)
  {
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "lat: ";
    Printer<float>::stream(s, indent + "  ", v.lat);
    s << indent << "lon: ";
    Printer<float>::stream(s, indent + "  ", v.lon);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_MESSAGE_GPSDATA_H
